# Cultural Interaction System
# Manages cultural storytelling and educational interactions

using UnityEngine;
using UnityEngine.Events;
using System.Collections;
using TMPro;

namespace HeritageDigitalTwins
{
    /// <summary>
    /// Handles cultural interactions for heritage site elements
    /// Provides educational content, storytelling, and cultural context
    /// </summary>
    public class CulturalInteraction : MonoBehaviour\n    {\n        [Header(\"Cultural Data\")]\n        public CulturalElementData culturalData;\n        public InteractionType interactionType = InteractionType.CulturalSignificance;\n        \n        [Header(\"Visual Feedback\")]\n        public GameObject highlightEffect;\n        public ParticleSystem culturalParticles;\n        public Material highlightMaterial;\n        public Color culturalHighlightColor = Color.gold;\n        \n        [Header(\"Audio\")]\n        public AudioSource audioSource;\n        public AudioClip[] culturalNarrations;\n        public AudioClip interactionSound;\n        \n        [Header(\"UI Elements\")]\n        public Canvas informationCanvas;\n        public TextMeshProUGUI titleText;\n        public TextMeshProUGUI descriptionText;\n        public UnityEngine.UI.Image culturalIcon;\n        \n        [Header(\"Animation\")]\n        public float animationDuration = 1f;\n        public AnimationCurve culturalAnimationCurve = AnimationCurve.EaseInOut(0f, 0f, 1f, 1f);\n        \n        // Events\n        [System.Serializable]\n        public class CulturalEvent : UnityEvent<CulturalElementData> { }\n        public CulturalEvent OnCulturalInteraction;\n        \n        // Private variables\n        private Renderer[] renderers;\n        private Material[] originalMaterials;\n        private bool isHighlighted = false;\n        private bool isInteracting = false;\n        private Collider interactionCollider;\n        \n        private void Start()\n        {\n            InitializeCulturalInteraction();\n        }\n        \n        private void InitializeCulturalInteraction()\n        {\n            // Get renderers for highlight effect\n            renderers = GetComponentsInChildren<Renderer>();\n            originalMaterials = new Material[renderers.Length];\n            \n            for (int i = 0; i < renderers.Length; i++)\n            {\n                originalMaterials[i] = renderers[i].material;\n            }\n            \n            // Setup audio source\n            if (audioSource == null)\n                audioSource = GetComponent<AudioSource>();\n                \n            if (audioSource == null)\n                audioSource = gameObject.AddComponent<AudioSource>();\n                \n            audioSource.playOnAwake = false;\n            audioSource.spatialBlend = 1f; // 3D spatial audio\n            \n            // Setup collider for interaction\n            interactionCollider = GetComponent<Collider>();\n            if (interactionCollider == null)\n            {\n                interactionCollider = gameObject.AddComponent<BoxCollider>();\n                interactionCollider.isTrigger = true;\n            }\n            \n            // Initialize UI\n            SetupUI();\n            \n            // Setup cultural data\n            if (culturalData != null)\n            {\n                ApplyCulturalData();\n            }\n        }\n        \n        private void SetupUI()\n        {\n            if (informationCanvas != null)\n            {\n                informationCanvas.gameObject.SetActive(false);\n                informationCanvas.worldCamera = Camera.main;\n            }\n        }\n        \n        private void ApplyCulturalData()\n        {\n            if (culturalData == null) return;\n            \n            // Set UI content\n            if (titleText != null)\n                titleText.text = culturalData.elementName;\n                \n            if (descriptionText != null)\n                descriptionText.text = culturalData.description;\n                \n            if (culturalIcon != null && culturalData.icon != null)\n                culturalIcon.sprite = culturalData.icon;\n                \n            // Set audio\n            if (culturalData.narrationClip != null)\n            {\n                audioSource.clip = culturalData.narrationClip;\n            }\n        }\n        \n        private void OnMouseDown()\n        {\n            if (!isInteracting)\n            {\n                StartCoroutine(PerformCulturalInteraction());\n            }\n        }\n        \n        private void OnTriggerEnter(Collider other)\n        {\n            if (other.CompareTag(\"Player\") || other.CompareTag(\"MainCamera\"))\n            {\n                ActivateHighlight();\n            }\n        }\n        \n        private void OnTriggerExit(Collider other)\n        {\n            if (other.CompareTag(\"Player\") || other.CompareTag(\"MainCamera\"))\n            {\n                DeactivateHighlight();\n            }\n        }\n        \n        public void ActivateHighlight()\n        {\n            if (isHighlighted) return;\n            \n            isHighlighted = true;\n            \n            // Apply highlight material\n            if (highlightMaterial != null)\n            {\n                for (int i = 0; i < renderers.Length; i++)\n                {\n                    renderers[i].material = highlightMaterial;\n                }\n            }\n            else\n            {\n                // Change material color\n                for (int i = 0; i < renderers.Length; i++)\n                {\n                    renderers[i].material.color = culturalHighlightColor;\n                }\n            }\n            \n            // Activate highlight effect\n            if (highlightEffect != null)\n                highlightEffect.SetActive(true);\n                \n            // Play cultural particles\n            if (culturalParticles != null)\n                culturalParticles.Play();\n                \n            // Play interaction sound\n            if (interactionSound != null && audioSource != null)\n            {\n                audioSource.PlayOneShot(interactionSound);\n            }\n        }\n        \n        public void DeactivateHighlight()\n        {\n            if (!isHighlighted) return;\n            \n            isHighlighted = false;\n            \n            // Restore original materials\n            for (int i = 0; i < renderers.Length; i++)\n            {\n                renderers[i].material = originalMaterials[i];\n            }\n            \n            // Deactivate highlight effect\n            if (highlightEffect != null)\n                highlightEffect.SetActive(false);\n                \n            // Stop cultural particles\n            if (culturalParticles != null)\n                culturalParticles.Stop();\n        }\n        \n        private IEnumerator PerformCulturalInteraction()\n        {\n            isInteracting = true;\n            \n            // Trigger interaction event\n            OnCulturalInteraction?.Invoke(culturalData);\n            \n            // Show information UI\n            if (informationCanvas != null)\n            {\n                informationCanvas.gameObject.SetActive(true);\n                yield return StartCoroutine(AnimateUIAppearance());\n            }\n            \n            // Play cultural narration\n            if (culturalData?.narrationClip != null && audioSource != null)\n            {\n                audioSource.clip = culturalData.narrationClip;\n                audioSource.Play();\n                \n                // Wait for narration to complete\n                yield return new WaitForSeconds(culturalData.narrationClip.length);\n            }\n            \n            // Hide UI after interaction\n            if (informationCanvas != null)\n            {\n                yield return StartCoroutine(AnimateUIDisappearance());\n                informationCanvas.gameObject.SetActive(false);\n            }\n            \n            isInteracting = false;\n        }\n        \n        private IEnumerator AnimateUIAppearance()\n        {\n            if (informationCanvas == null) yield break;\n            \n            CanvasGroup canvasGroup = informationCanvas.GetComponent<CanvasGroup>();\n            if (canvasGroup == null)\n                canvasGroup = informationCanvas.gameObject.AddComponent<CanvasGroup>();\n                \n            canvasGroup.alpha = 0f;\n            informationCanvas.transform.localScale = Vector3.zero;\n            \n            float timer = 0f;\n            \n            while (timer < animationDuration)\n            {\n                float progress = timer / animationDuration;\n                float easedProgress = culturalAnimationCurve.Evaluate(progress);\n                \n                canvasGroup.alpha = easedProgress;\n                informationCanvas.transform.localScale = Vector3.one * easedProgress;\n                \n                timer += Time.deltaTime;\n                yield return null;\n            }\n            \n            canvasGroup.alpha = 1f;\n            informationCanvas.transform.localScale = Vector3.one;\n        }\n        \n        private IEnumerator AnimateUIDisappearance()\n        {\n            if (informationCanvas == null) yield break;\n            \n            CanvasGroup canvasGroup = informationCanvas.GetComponent<CanvasGroup>();\n            if (canvasGroup == null) yield break;\n            \n            float timer = 0f;\n            \n            while (timer < animationDuration)\n            {\n                float progress = timer / animationDuration;\n                float easedProgress = culturalAnimationCurve.Evaluate(1f - progress);\n                \n                canvasGroup.alpha = easedProgress;\n                informationCanvas.transform.localScale = Vector3.one * easedProgress;\n                \n                timer += Time.deltaTime;\n                yield return null;\n            }\n            \n            canvasGroup.alpha = 0f;\n            informationCanvas.transform.localScale = Vector3.zero;\n        }\n        \n        public void AnimateCulturalSignificance()\n        {\n            StartCoroutine(CulturalSignificanceAnimation());\n        }\n        \n        private IEnumerator CulturalSignificanceAnimation()\n        {\n            Vector3 originalScale = transform.localScale;\n            Vector3 originalPosition = transform.position;\n            \n            float animTime = 2f;\n            float timer = 0f;\n            \n            while (timer < animTime)\n            {\n                float progress = timer / animTime;\n                \n                // Gentle pulsing scale animation\n                float scaleMultiplier = 1f + Mathf.Sin(progress * Mathf.PI * 4) * 0.05f;\n                transform.localScale = originalScale * scaleMultiplier;\n                \n                // Subtle float animation\n                float heightOffset = Mathf.Sin(progress * Mathf.PI * 2) * 0.1f;\n                transform.position = originalPosition + Vector3.up * heightOffset;\n                \n                timer += Time.deltaTime;\n                yield return null;\n            }\n            \n            // Restore original transform\n            transform.localScale = originalScale;\n            transform.position = originalPosition;\n        }\n        \n        public void SetCulturalData(CulturalElementData data)\n        {\n            culturalData = data;\n            ApplyCulturalData();\n        }\n        \n        public void PlayMultilingualNarration(string languageCode)\n        {\n            // Find narration for specified language\n            if (culturalData == null) return;\n            \n            // This would be expanded to support multilingual audio\n            // For now, play the default narration\n            if (culturalData.narrationClip != null && audioSource != null)\n            {\n                audioSource.clip = culturalData.narrationClip;\n                audioSource.Play();\n            }\n        }\n        \n        public void TriggerManualInteraction()\n        {\n            if (!isInteracting)\n            {\n                StartCoroutine(PerformCulturalInteraction());\n            }\n        }\n        \n        // MSME Training: Simple interaction trigger for guided tours\n        public void MSMEGuidedInteraction(string guidedMessage)\n        {\n            if (descriptionText != null)\n            {\n                descriptionText.text = guidedMessage;\n            }\n            \n            TriggerManualInteraction();\n        }\n        \n        private void OnDestroy()\n        {\n            // Cleanup\n            if (isHighlighted)\n            {\n                DeactivateHighlight();\n            }\n        }\n    }\n}