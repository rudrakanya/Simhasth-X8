# Timeline Visualization System
# Interactive historical timeline for heritage sites

using UnityEngine;
using UnityEngine.UI;
using TMPro;
using System.Collections;
using System.Collections.Generic;
using System.Linq;

namespace HeritageDigitalTwins
{
    /// <summary>
    /// Interactive timeline visualization for heritage site history
    /// Shows cultural evolution and historical periods
    /// </summary>
    public class TimelineVisualization : MonoBehaviour
    {
        [Header("Timeline UI")]
        public Canvas timelineCanvas;
        public RectTransform timelineParent;
        public GameObject timelinePeriodPrefab;
        public ScrollRect timelineScrollRect;
        
        [Header("Timeline Display")]
        public TextMeshProUGUI timelineTitle;
        public TextMeshProUGUI currentPeriodTitle;
        public TextMeshProUGUI currentPeriodDescription;
        public Image currentPeriodImage;
        
        [Header("3D Timeline Elements")]
        public Transform timeline3DParent;
        public GameObject timeline3DMarkerPrefab;
        public LineRenderer timelineLine;\n        \n        [Header(\"Animation Settings\")]\n        public float animationDuration = 1f;\n        public AnimationCurve timelineAnimationCurve = AnimationCurve.EaseInOut(0f, 0f, 1f, 1f);\n        public float periodTransitionDuration = 0.5f;\n        \n        [Header(\"Historical Periods Data\")]\n        public HistoricalPeriodData[] historicalPeriods;\n        \n        // Private variables\n        private List<TimelinePeriodUI> periodUIElements = new List<TimelinePeriodUI>();\n        private List<Timeline3DMarker> timeline3DMarkers = new List<Timeline3DMarker>();\n        private int currentSelectedPeriod = -1;\n        private bool isTimelineVisible = false;\n        private HeritageSiteData currentSiteData;\n        \n        private void Start()\n        {\n            InitializeTimeline();\n        }\n        \n        private void InitializeTimeline()\n        {\n            // Initially hide timeline\n            if (timelineCanvas != null)\n                timelineCanvas.gameObject.SetActive(false);\n                \n            // Setup 3D timeline\n            Setup3DTimeline();\n        }\n        \n        private void Setup3DTimeline()\n        {\n            if (timelineLine != null)\n            {\n                timelineLine.positionCount = 0;\n                timelineLine.enabled = false;\n            }\n        }\n        \n        public void ShowTimelineForSite(HeritageSiteData siteData)\n        {\n            if (siteData == null) return;\n            \n            currentSiteData = siteData;\n            \n            // Use site-specific timeline data if available, otherwise use default\n            HistoricalPeriod[] periods = siteData.timeline?.Length > 0 ? \n                siteData.timeline : GetDefaultTimelineForSiteType(siteData.siteType);\n            \n            if (periods == null || periods.Length == 0)\n            {\n                Debug.LogWarning(\"No timeline data available for site: \" + siteData.siteName);\n                return;\n            }\n            \n            // Clear existing timeline\n            ClearTimeline();\n            \n            // Create timeline elements\n            CreateTimelineElements(periods);\n            \n            // Show timeline with animation\n            StartCoroutine(ShowTimelineAnimated());\n            \n            // Set title\n            if (timelineTitle != null)\n            {\n                timelineTitle.text = $\"Timeline: {siteData.siteName}\";\n            }\n        }\n        \n        private HistoricalPeriod[] GetDefaultTimelineForSiteType(SiteType siteType)\n        {\n            // Provide default timeline based on site type\n            switch (siteType)\n            {\n                case SiteType.TempleComplex:\n                    return GetTempleComplexTimeline();\n                case SiteType.RockCutCaves:\n                    return GetRockCutCavesTimeline();\n                case SiteType.AstronomicalSite:\n                    return GetAstronomicalSiteTimeline();\n                default:\n                    return GetGenericHeritageTimeline();\n            }\n        }\n        \n        private HistoricalPeriod[] GetTempleComplexTimeline()\n        {\n            return new HistoricalPeriod[]\n            {\n                new HistoricalPeriod {\n                    periodName = \"Early Construction\",\n                    dateRange = \"8th-9th Century CE\",\n                    description = \"Initial temple construction during early medieval period\",\n                    timelineColor = new Color(0.8f, 0.4f, 0.2f)\n                },\n                new HistoricalPeriod {\n                    periodName = \"Classical Period\",\n                    dateRange = \"10th-12th Century CE\",\n                    description = \"Peak of architectural development and religious activity\",\n                    timelineColor = new Color(0.9f, 0.7f, 0.2f)\n                },\n                new HistoricalPeriod {\n                    periodName = \"Medieval Decline\",\n                    dateRange = \"13th-16th Century CE\",\n                    description = \"Period of reduced maintenance and partial abandonment\",\n                    timelineColor = new Color(0.6f, 0.3f, 0.5f)\n                },\n                new HistoricalPeriod {\n                    periodName = \"Colonial Period\",\n                    dateRange = \"17th-19th Century CE\",\n                    description = \"British colonial documentation and early archaeological surveys\",\n                    timelineColor = new Color(0.4f, 0.6f, 0.8f)\n                },\n                new HistoricalPeriod {\n                    periodName = \"Modern Restoration\",\n                    dateRange = \"20th-21st Century CE\",\n                    description = \"Archaeological restoration and heritage conservation efforts\",\n                    timelineColor = new Color(0.3f, 0.8f, 0.4f)\n                }\n            };\n        }\n        \n        private HistoricalPeriod[] GetRockCutCavesTimeline()\n        {\n            return new HistoricalPeriod[]\n            {\n                new HistoricalPeriod {\n                    periodName = \"Gupta Period\",\n                    dateRange = \"4th-6th Century CE\",\n                    description = \"Golden age of Indian art and cave excavation\",\n                    timelineColor = new Color(0.9f, 0.6f, 0.1f)\n                },\n                new HistoricalPeriod {\n                    periodName = \"Post-Gupta\",\n                    dateRange = \"7th-10th Century CE\",\n                    description = \"Continued artistic development and religious patronage\",\n                    timelineColor = new Color(0.7f, 0.5f, 0.8f)\n                },\n                new HistoricalPeriod {\n                    periodName = \"Rediscovery\",\n                    dateRange = \"19th-20th Century CE\",\n                    description = \"British archaeological surveys and modern documentation\",\n                    timelineColor = new Color(0.5f, 0.7f, 0.9f)\n                }\n            };\n        }\n        \n        private HistoricalPeriod[] GetAstronomicalSiteTimeline()\n        {\n            return new HistoricalPeriod[]\n            {\n                new HistoricalPeriod {\n                    periodName = \"Ancient Astronomy\",\n                    dateRange = \"3rd-8th Century CE\",\n                    description = \"Early astronomical observations and instrument development\",\n                    timelineColor = new Color(0.2f, 0.3f, 0.8f)\n                },\n                new HistoricalPeriod {\n                    periodName = \"Medieval Science\",\n                    dateRange = \"9th-15th Century CE\",\n                    description = \"Advanced astronomical calculations and architectural alignments\",\n                    timelineColor = new Color(0.8f, 0.3f, 0.7f)\n                },\n                new HistoricalPeriod {\n                    periodName = \"Modern Study\",\n                    dateRange = \"20th-21st Century CE\",\n                    description = \"Scientific analysis of ancient astronomical knowledge\",\n                    timelineColor = new Color(0.1f, 0.8f, 0.6f)\n                }\n            };\n        }\n        \n        private HistoricalPeriod[] GetGenericHeritageTimeline()\n        {\n            return new HistoricalPeriod[]\n            {\n                new HistoricalPeriod {\n                    periodName = \"Ancient Period\",\n                    dateRange = \"Before 1000 CE\",\n                    description = \"Early cultural and architectural development\",\n                    timelineColor = new Color(0.7f, 0.4f, 0.2f)\n                },\n                new HistoricalPeriod {\n                    periodName = \"Medieval Period\",\n                    dateRange = \"1000-1500 CE\",\n                    description = \"Flourishing of arts, culture, and architecture\",\n                    timelineColor = new Color(0.8f, 0.6f, 0.3f)\n                },\n                new HistoricalPeriod {\n                    periodName = \"Modern Period\",\n                    dateRange = \"1500 CE - Present\",\n                    description = \"Heritage preservation and archaeological study\",\n                    timelineColor = new Color(0.4f, 0.7f, 0.5f)\n                }\n            };\n        }\n        \n        private void CreateTimelineElements(HistoricalPeriod[] periods)\n        {\n            // Create UI timeline elements\n            CreateUITimelineElements(periods);\n            \n            // Create 3D timeline markers\n            Create3DTimelineElements(periods);\n        }\n        \n        private void CreateUITimelineElements(HistoricalPeriod[] periods)\n        {\n            if (timelineParent == null || timelinePeriodPrefab == null) return;\n            \n            float totalWidth = timelineParent.rect.width;\n            float periodWidth = totalWidth / periods.Length;\n            \n            for (int i = 0; i < periods.Length; i++)\n            {\n                HistoricalPeriod period = periods[i];\n                \n                // Instantiate period UI element\n                GameObject periodObj = Instantiate(timelinePeriodPrefab, timelineParent);\n                RectTransform periodRect = periodObj.GetComponent<RectTransform>();\n                \n                // Position the period element\n                periodRect.anchoredPosition = new Vector2(i * periodWidth, 0);\n                periodRect.sizeDelta = new Vector2(periodWidth * 0.9f, periodRect.sizeDelta.y);\n                \n                // Setup period UI component\n                TimelinePeriodUI periodUI = periodObj.GetComponent<TimelinePeriodUI>();\n                if (periodUI == null)\n                    periodUI = periodObj.AddComponent<TimelinePeriodUI>();\n                    \n                periodUI.SetupPeriod(period, i, this);\n                periodUIElements.Add(periodUI);\n            }\n        }\n        \n        private void Create3DTimelineElements(HistoricalPeriod[] periods)\n        {\n            if (timeline3DParent == null || timeline3DMarkerPrefab == null) return;\n            \n            // Clear existing 3D elements\n            foreach (var marker in timeline3DMarkers)\n            {\n                if (marker != null && marker.gameObject != null)\n                    DestroyImmediate(marker.gameObject);\n            }\n            timeline3DMarkers.Clear();\n            \n            // Create timeline line\n            if (timelineLine != null)\n            {\n                timelineLine.positionCount = periods.Length;\n                Vector3[] linePositions = new Vector3[periods.Length];\n                \n                for (int i = 0; i < periods.Length; i++)\n                {\n                    Vector3 markerPosition = timeline3DParent.position + Vector3.right * (i * 2f);\n                    linePositions[i] = markerPosition;\n                    \n                    // Create 3D marker\n                    GameObject markerObj = Instantiate(timeline3DMarkerPrefab, markerPosition, Quaternion.identity, timeline3DParent);\n                    Timeline3DMarker marker = markerObj.GetComponent<Timeline3DMarker>();\n                    if (marker == null)\n                        marker = markerObj.AddComponent<Timeline3DMarker>();\n                        \n                    marker.SetupMarker(periods[i], i, this);\n                    timeline3DMarkers.Add(marker);\n                }\n                \n                timelineLine.SetPositions(linePositions);\n                timelineLine.enabled = true;\n            }\n        }\n        \n        private IEnumerator ShowTimelineAnimated()\n        {\n            if (timelineCanvas == null) yield break;\n            \n            timelineCanvas.gameObject.SetActive(true);\n            isTimelineVisible = true;\n            \n            // Animate timeline appearance\n            CanvasGroup canvasGroup = timelineCanvas.GetComponent<CanvasGroup>();\n            if (canvasGroup == null)\n                canvasGroup = timelineCanvas.gameObject.AddComponent<CanvasGroup>();\n                \n            canvasGroup.alpha = 0f;\n            \n            float timer = 0f;\n            while (timer < animationDuration)\n            {\n                float progress = timer / animationDuration;\n                float easedProgress = timelineAnimationCurve.Evaluate(progress);\n                canvasGroup.alpha = easedProgress;\n                \n                timer += Time.deltaTime;\n                yield return null;\n            }\n            \n            canvasGroup.alpha = 1f;\n            \n            // Animate individual period elements\n            yield return StartCoroutine(AnimatePeriodElements());\n        }\n        \n        private IEnumerator AnimatePeriodElements()\n        {\n            // Animate period elements appearing in sequence\n            for (int i = 0; i < periodUIElements.Count; i++)\n            {\n                if (periodUIElements[i] != null)\n                {\n                    periodUIElements[i].AnimateAppearance();\n                    yield return new WaitForSeconds(0.1f);\n                }\n            }\n            \n            // Animate 3D markers\n            for (int i = 0; i < timeline3DMarkers.Count; i++)\n            {\n                if (timeline3DMarkers[i] != null)\n                {\n                    timeline3DMarkers[i].AnimateAppearance();\n                    yield return new WaitForSeconds(0.1f);\n                }\n            }\n        }\n        \n        public void SelectPeriod(int periodIndex)\n        {\n            if (periodIndex < 0 || periodIndex >= periodUIElements.Count) return;\n            \n            // Deselect previous period\n            if (currentSelectedPeriod >= 0 && currentSelectedPeriod < periodUIElements.Count)\n            {\n                periodUIElements[currentSelectedPeriod].SetSelected(false);\n                if (currentSelectedPeriod < timeline3DMarkers.Count)\n                    timeline3DMarkers[currentSelectedPeriod].SetSelected(false);\n            }\n            \n            // Select new period\n            currentSelectedPeriod = periodIndex;\n            periodUIElements[periodIndex].SetSelected(true);\n            if (periodIndex < timeline3DMarkers.Count)\n                timeline3DMarkers[periodIndex].SetSelected(true);\n            \n            // Update period information display\n            UpdatePeriodDisplay(periodIndex);\n            \n            // Scroll to selected period\n            ScrollToPeriod(periodIndex);\n        }\n        \n        private void UpdatePeriodDisplay(int periodIndex)\n        {\n            HistoricalPeriod[] periods = GetCurrentTimelinePeriods();\n            if (periodIndex >= periods.Length) return;\n            \n            HistoricalPeriod period = periods[periodIndex];\n            \n            if (currentPeriodTitle != null)\n                currentPeriodTitle.text = period.periodName;\n                \n            if (currentPeriodDescription != null)\n                currentPeriodDescription.text = $\"{period.dateRange}\\n\\n{period.description}\";\n                \n            if (currentPeriodImage != null && period.periodImage != null)\n            {\n                currentPeriodImage.sprite = period.periodImage;\n                currentPeriodImage.gameObject.SetActive(true);\n            }\n            else if (currentPeriodImage != null)\n            {\n                currentPeriodImage.gameObject.SetActive(false);\n            }\n        }\n        \n        private HistoricalPeriod[] GetCurrentTimelinePeriods()\n        {\n            if (currentSiteData?.timeline?.Length > 0)\n                return currentSiteData.timeline;\n            else if (currentSiteData != null)\n                return GetDefaultTimelineForSiteType(currentSiteData.siteType);\n            else\n                return new HistoricalPeriod[0];\n        }\n        \n        private void ScrollToPeriod(int periodIndex)\n        {\n            if (timelineScrollRect == null || periodUIElements.Count == 0) return;\n            \n            float targetPosition = (float)periodIndex / (periodUIElements.Count - 1);\n            StartCoroutine(AnimateScrollToPeriod(targetPosition));\n        }\n        \n        private IEnumerator AnimateScrollToPeriod(float targetPosition)\n        {\n            float startPosition = timelineScrollRect.horizontalNormalizedPosition;\n            float timer = 0f;\n            \n            while (timer < periodTransitionDuration)\n            {\n                float progress = timer / periodTransitionDuration;\n                float easedProgress = Mathf.SmoothStep(0f, 1f, progress);\n                \n                timelineScrollRect.horizontalNormalizedPosition = Mathf.Lerp(\n                    startPosition, targetPosition, easedProgress\n                );\n                \n                timer += Time.deltaTime;\n                yield return null;\n            }\n            \n            timelineScrollRect.horizontalNormalizedPosition = targetPosition;\n        }\n        \n        public void HideTimeline()\n        {\n            if (!isTimelineVisible) return;\n            \n            StartCoroutine(HideTimelineAnimated());\n        }\n        \n        private IEnumerator HideTimelineAnimated()\n        {\n            if (timelineCanvas == null) yield break;\n            \n            CanvasGroup canvasGroup = timelineCanvas.GetComponent<CanvasGroup>();\n            if (canvasGroup == null) yield break;\n            \n            float timer = 0f;\n            while (timer < animationDuration)\n            {\n                float progress = timer / animationDuration;\n                float easedProgress = timelineAnimationCurve.Evaluate(1f - progress);\n                canvasGroup.alpha = easedProgress;\n                \n                timer += Time.deltaTime;\n                yield return null;\n            }\n            \n            canvasGroup.alpha = 0f;\n            timelineCanvas.gameObject.SetActive(false);\n            isTimelineVisible = false;\n        }\n        \n        private void ClearTimeline()\n        {\n            // Clear UI elements\n            foreach (var element in periodUIElements)\n            {\n                if (element != null && element.gameObject != null)\n                    DestroyImmediate(element.gameObject);\n            }\n            periodUIElements.Clear();\n            \n            // Clear 3D markers\n            foreach (var marker in timeline3DMarkers)\n            {\n                if (marker != null && marker.gameObject != null)\n                    DestroyImmediate(marker.gameObject);\n            }\n            timeline3DMarkers.Clear();\n            \n            // Clear timeline line\n            if (timelineLine != null)\n            {\n                timelineLine.positionCount = 0;\n                timelineLine.enabled = false;\n            }\n            \n            currentSelectedPeriod = -1;\n        }\n        \n        public void ToggleTimeline()\n        {\n            if (isTimelineVisible)\n                HideTimeline();\n            else if (currentSiteData != null)\n                ShowTimelineForSite(currentSiteData);\n        }\n        \n        public bool IsTimelineVisible()\n        {\n            return isTimelineVisible;\n        }\n        \n        public int GetCurrentSelectedPeriod()\n        {\n            return currentSelectedPeriod;\n        }\n        \n        // MSME Training: Simplified timeline navigation\n        public void MSMEShowNextPeriod()\n        {\n            int nextIndex = (currentSelectedPeriod + 1) % periodUIElements.Count;\n            SelectPeriod(nextIndex);\n        }\n        \n        public void MSMEShowPreviousPeriod()\n        {\n            int prevIndex = currentSelectedPeriod - 1;\n            if (prevIndex < 0) prevIndex = periodUIElements.Count - 1;\n            SelectPeriod(prevIndex);\n        }\n        \n        private void OnDestroy()\n        {\n            ClearTimeline();\n        }\n    }\n    \n    [System.Serializable]\n    public class HistoricalPeriodData\n    {\n        public string siteName;\n        public HistoricalPeriod[] periods;\n    }\n}